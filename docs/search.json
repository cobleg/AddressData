[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Data analysis steps",
    "section": "",
    "text": "This web site contains helpful information about processing Geoscape’s Geocoded National Address File (G-NAF). This is a spatial data set containing 15 million physical addresses. This is an open data set that is used to: - help emergency services locate building access points - validate addresses for online forms - infrastructure and land use planning.\nClick on this link for more information about the data set can be found here.\nGiven the complexity of the G-NAF data, it can be tricky figuring out how to manipulate it. So this repository contains some worked examples using open source applications such as R.\nNote that the following examples are executed in this version of R:\n\nprint(version)\n\n               _                                \nplatform       x86_64-w64-mingw32               \narch           x86_64                           \nos             mingw32                          \ncrt            ucrt                             \nsystem         x86_64, mingw32                  \nstatus                                          \nmajor          4                                \nminor          3.2                              \nyear           2023                             \nmonth          10                               \nday            31                               \nsvn rev        85441                            \nlanguage       R                                \nversion.string R version 4.3.2 (2023-10-31 ucrt)\nnickname       Eye Holes                        \n\n\nThis web page was created on this date:\n\nSys.Date()\n\n[1] \"2023-11-14\""
  },
  {
    "objectID": "projects.html#introduction",
    "href": "projects.html#introduction",
    "title": "Data analysis steps",
    "section": "",
    "text": "This web site contains helpful information about processing Geoscape’s Geocoded National Address File (G-NAF). This is a spatial data set containing 15 million physical addresses. This is an open data set that is used to: - help emergency services locate building access points - validate addresses for online forms - infrastructure and land use planning.\nClick on this link for more information about the data set can be found here.\nGiven the complexity of the G-NAF data, it can be tricky figuring out how to manipulate it. So this repository contains some worked examples using open source applications such as R.\nNote that the following examples are executed in this version of R:\n\nprint(version)\n\n               _                                \nplatform       x86_64-w64-mingw32               \narch           x86_64                           \nos             mingw32                          \ncrt            ucrt                             \nsystem         x86_64, mingw32                  \nstatus                                          \nmajor          4                                \nminor          3.2                              \nyear           2023                             \nmonth          10                               \nday            31                               \nsvn rev        85441                            \nlanguage       R                                \nversion.string R version 4.3.2 (2023-10-31 ucrt)\nnickname       Eye Holes                        \n\n\nThis web page was created on this date:\n\nSys.Date()\n\n[1] \"2023-11-14\""
  },
  {
    "objectID": "projects.html#key-steps",
    "href": "projects.html#key-steps",
    "title": "Data analysis steps",
    "section": "Key steps",
    "text": "Key steps\n\nStep 1 (Import the data)\nDownload the data set, which is named Aug 23 - Geoscape G-NAF - GDA2020. Unzip and place in an R project file.\nSave in an R project data folder. Note that the data will be saved in a folder several layers deep.\n\nhere::here(\"data\", \"G-NAF\", \"G-NAF AUGUST 2023\", \"Standard\")\n\n[1] \"C:/Users/COBLENG/Documents/R/AddressData/data/G-NAF/G-NAF AUGUST 2023/Standard\"\n\n\nWrite a script to import the data, for example:\n\n# Objective: import GNAF address data\n# Author: Grant Coble-Neal\n# Dependencies: nil\n\nlibrary(here)\n\nhere() starts at C:/Users/COBLENG/Documents/R/AddressData\n\ndf.0 &lt;- read.table(here(\"data\", \"G-NAF\", \"G-NAF AUGUST 2023\", \"Standard\", \"ACT_ADDRESS_ALIAS_psv.psv\"), sep = \"|\", header = TRUE, stringsAsFactors = FALSE)\n\nhead(df.0)\n\n  ADDRESS_ALIAS_PID DATE_CREATED DATE_RETIRED  PRINCIPAL_PID      ALIAS_PID\n1          15024480   2018-07-27           NA GAACT714853934 GAACT714853933\n2          21500626   2021-08-01           NA GAACT714895624 GAACT715143249\n3          18834724   2020-04-23           NA GAACT715701568 GAACT715031088\n4          18834717   2020-04-23           NA GAACT715701575 GAACT715023132\n5          18834716   2020-04-23           NA GAACT715701596 GAACT715022550\n6          15025423   2018-07-27           NA GAACT715293845 GAACT718359326\n  ALIAS_TYPE_CODE ALIAS_COMMENT\n1             SYN            NA\n2             SYN            NA\n3             SYN            NA\n4             SYN            NA\n5             SYN            NA\n6             SYN            NA\n\n\nEach address record has a latitude and a longitude. The next code chunk selects the geocoded address data for the Australian Capital Territory (ACT). Being a relatively small area, the ACT is a good example to illustrate the process here.\n\nACT.point &lt;- read.table(here(\"data\", \"G-NAF\", \"G-NAF AUGUST 2023\", \"Standard\", \"ACT_LOCALITY_POINT_psv.psv\"), sep = \"|\", header = TRUE, stringsAsFactors = FALSE)\n\nhead(ACT.point)\n\n  LOCALITY_POINT_PID DATE_CREATED DATE_RETIRED    LOCALITY_PID\n1    loc6904a978ed00   2021-08-17           NA loc6904a978ed00\n2    locdf08084d164d   2021-08-17           NA locdf08084d164d\n3    locf79445c447e9   2021-08-17           NA locf79445c447e9\n4          500223394   2018-08-03           NA       500223394\n5          500220144   2022-11-13           NA loc243c990388a1\n6          500223393   2021-11-12           NA       500223393\n  PLANIMETRIC_ACCURACY LONGITUDE  LATITUDE\n1                   NA  149.0402 -35.29982\n2                   NA  149.0557 -35.16749\n3                   NA  148.9883 -35.84839\n4                   NA  149.1333 -35.18332\n5                   NA  149.1029 -35.48209\n6                   NA  149.0055 -35.25502\n\n\nThe question is; what to do with these data? One idea, particularly relevant to infrastructure planning is to map the address data for a specific area and see what spatial patterns it presents. For example, how densely populated is a given region? In many parts of Australia, the population density is very low.\nThis can be seen by visualising mesh block data available from the Australian Population and Housing Census. (“Mesh Blocks | Australian Bureau of Statistics” Wed, 06/10/2021 - 11:30)\nLet’s get the mesh block data for Australia. First, check the URL for the mesh block shapefiles. Click on this link to find the relevant web page. Then right-mouse-button-click on the Download ZIP link as shown in figure 1.\n\n\n\nFigure 1: ?(caption)\n\n\nPaste the copied link in the code chunk below, replacing the existing link.\n\nMB.URL &lt;-c(\"https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files/MB_2021_AUST_SHP_GDA2020.zip\")\n\nThen run the next code chunk to download and unzip the files, placing the files in a subdirectory named: MeshBlocks.\n\ndir.create(here(\"data\", \"MeshBlocks\"), showWarnings = FALSE) # create a sub folder in the data directory\n\n# Uncomment and run the next two lines:\n# download.file(MB.URL, destfile = 'census_MB.zip')\n# unzip(zipfile = 'census_MB.zip', exdir = here::here('data', 'MeshBlocks'))\n\nThe next code chunk will load the G-NAF mesh block data file.\n\ndf.meshblock.address.WA &lt;- read.table(here(\"data\", \"G-NAF\", \"G-NAF AUGUST 2023\", \"Standard\", \"WA_ADDRESS_MESH_BLOCK_2021_psv.psv\"), sep = \"|\", header = TRUE, stringsAsFactors = FALSE)\n\nhead(df.meshblock.address.WA)\n\n  ADDRESS_MESH_BLOCK_2021_PID DATE_CREATED DATE_RETIRED ADDRESS_DETAIL_PID\n1                WA1565357452   2021-08-10           NA     GAWA_146789012\n2                WA1565357453   2021-08-10           NA     GAWA_146789013\n3                WA1565357454   2021-08-10           NA     GAWA_146789014\n4                WA1565357455   2021-08-10           NA     GAWA_146789015\n5                WA1565357456   2021-08-10           NA     GAWA_146789016\n6                WA1565357457   2021-08-10           NA     GAWA_146789017\n  MB_MATCH_CODE     MB_2021_PID\n1             1 MB2150205580000\n2             1 MB2150205580000\n3             1 MB2150205580000\n4             1 MB2150058530000\n5             1 MB2150058530000\n6             1 MB2150058530000\n\n\nFor context, it would be useful to also have the map of Australia. Let’s get that too.\n\nURL.Australia &lt;- c(\"https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files/AUS_2021_AUST_SHP_GDA2020.zip\")\ndownload.file(URL.Australia, destfile = 'Australia.zip')\nunzip(zipfile = 'Australia.zip', exdir = here('data'))\n\nAust &lt;- sf::st_read(here(\"data\", \"AUS_2021_AUST_GDA2020.shp\"))\n\nReading layer `AUS_2021_AUST_GDA2020' from data source \n  `C:\\Users\\COBLENG\\Documents\\R\\AddressData\\data\\AUS_2021_AUST_GDA2020.shp' \n  using driver `ESRI Shapefile'\nreplacing null geometries with empty geometries\nSimple feature collection with 2 features and 6 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.81695 ymin: -43.7405 xmax: 167.998 ymax: -9.142163\nGeodetic CRS:  GDA2020\n\n\n\n\nStep 2 (Process the data)\nThe first processing step is visualising the recevied data. Let’s create a map of Australia first and build up each layer as we get more specific.\n\nMap of Australia\n\nlibrary(ggplot2)\nlibrary(sf)\n\nLinking to GEOS 3.11.2, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE\n\nAust.map &lt;- ggplot() +\n  geom_sf(data = Aust, size = 1.5, colour =\"black\") +\n  coord_sf() +\n  theme_bw()\nAust.map\n\n\n\nggsave(file = here(\"img\", \"Aust_map.png\"), device = \"png\" )\n\nSaving 7 x 5 in image\n\n\n\n\nAdd a the East Pilbara mesh block boundaries to the map\nNow add the mesh block data. Given the mesh block file is very large, it is sensible to first select a subset of the data. This example selects the region named: East Pilbara.\n\nMB &lt;- sf::st_read(here(\"data\", \"MeshBlocks\", \"MB_2021_AUST_GDA2020.shp\"))\n\nReading layer `MB_2021_AUST_GDA2020' from data source \n  `C:\\Users\\COBLENG\\Documents\\R\\AddressData\\data\\MeshBlocks\\MB_2021_AUST_GDA2020.shp' \n  using driver `ESRI Shapefile'\nreplacing null geometries with empty geometries\nSimple feature collection with 368286 features and 19 fields (with 31 geometries empty)\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 96.81695 ymin: -43.7405 xmax: 167.998 ymax: -9.142163\nGeodetic CRS:  GDA2020\n\nEastPilbara &lt;- MB %&gt;% dplyr::filter(\n  SA2_NAME21 == \"East Pilbara\"\n)\n\nNow the East Pilbara mesh block layer can be added to the map of Australia\n\nggplot2::ggplot() +\n  geom_sf(data = Aust, size = 1.5, colour =\"black\") +\n  geom_sf(data = EastPilbara, size = 1.5, colour =\"white\", fill = 'blue') +\n  coord_sf() +\n  theme_bw() +\n  ggtitle(\"East Pilbara\")\n\n\n\nggsave(file = here(\"img\", \"EastPilbara_map.png\"), device = \"png\" )\n\nSaving 7 x 5 in image\n\n\n\n\nCreate a geopoint map of the ACT\nAn API call to Google Maps can be made to create a base map, which provides context for the G-NAF geocoded address data. This next code chunk displays the G-NAF address data across the ACT. The ‘make_bbox’ function in the R library ggmap is used to set the zoom level.\nNote that a valid Google Maps API key is required to successfully execute this example.\n\nlibrary(ggmap)\n\nℹ Google's Terms of Service: &lt;https://mapsplatform.google.com&gt;\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n\nbox &lt;- ggmap::make_bbox(lon = LONGITUDE, lat = LATITUDE, data = ACT.point)\ncalc_zoom(box)\n\n[1] 11\n\nqmap('canberra', zoom = calc_zoom(box), maptype='roadmap') +\n  geom_point(aes(x = LONGITUDE, y = LATITUDE), data = ACT.point,\n             colour = 'red', fill = 'black', alpha = 0.4, size = 0.5) \n\nℹ &lt;https://maps.googleapis.com/maps/api/staticmap?center=canberra&zoom=11&size=640x640&scale=2&maptype=roadmap&language=en-EN&key=xxx-0sEU&gt;\nℹ &lt;https://maps.googleapis.com/maps/api/geocode/json?address=canberra&key=xxx-0sEU&gt;\n\n\nWarning: Removed 9 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This web site contains information about the Australian Geoscape Geocoded National Address File (G-NAF).\n\nAttributions\nHome address icons created by Andrean Prabowo - Flaticon\n\n\n  \n\n\nThanks for checking out my web site!"
  }
]